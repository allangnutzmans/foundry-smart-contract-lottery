// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PingDummy {
  id        String   @id @default(cuid())
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  nickname String?
  avatar   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  wallets      Wallet[]
  accounts     Account[]
  sessions     Session[]
}

model Wallet {
  id        String   @id @default(cuid())
  address   String   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String?
  user     User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  wagerHistory  WagerHistory[]
}

model WagerHistory {
  id          String    @id @default(uuid())
  walletId    String
  wagerAmount Float
  prizeAmount Float
  endDate     DateTime

  createdAt   DateTime  @default(now())

  wallet      Wallet    @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}